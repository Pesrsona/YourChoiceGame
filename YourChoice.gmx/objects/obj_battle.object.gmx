<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///GM for the battles
state = "init";

draw_set_font(fnt_default);

randomize();

turnOrder = ds_list_create();
turnCounter = -1;
turnMax = 0;
currentUnit = noone;
roundCounter = 0;

globalvar map;

mapWidth = room_width/GRID_SIZE;
mapHeight = room_height/GRID_SIZE;

//create tiles
for(xx = 0; xx &lt; mapWidth; xx += 1){
    for(yy = 0; yy &lt; mapHeight; yy += 1){
        map[xx,yy] = instance_create(xx * GRID_SIZE, yy * GRID_SIZE, obj_tile);
        map[xx,yy].gridX = xx;
        map[xx,yy].gridY = yy;
    }
}

//populate neighbors list
for(xx = 0; xx &lt; mapWidth; xx += 1){
    for(yy = 0; yy &lt; mapHeight; yy += 1){
        tile = map[xx,yy];
        
        //add left neighbor
        if(xx &gt; 0){
            ds_list_add(tile.neighbors, map[xx-1,yy]);
        }
        //add right neighbor
        if(xx &lt; mapWidth - 1){
            ds_list_add(tile.neighbors, map[xx+1,yy]);
        }
        //add top neighbor
        if(yy &gt; 0){
            ds_list_add(tile.neighbors, map[xx,yy - 1]);
        }
        //add bottom neighbor
        if(yy &lt; mapHeight -1){
            ds_list_add(tile.neighbors, map[xx,yy+1]);
        }
        //add top left neighbor
        if(xx &gt; 0 &amp;&amp; yy &gt; 0){
            ds_list_add(tile.neighbors, map[xx-1,yy-1]);
        }
        //add top right neighbor
        if(xx &lt; mapWidth -1 &amp;&amp; yy &gt; 0){
            ds_list_add(tile.neighbors, map[xx+1,yy-1]);
        }
        //add bottom left neighbor
        if(xx &gt; 0 &amp;&amp; yy &lt; mapHeight - 1){
            ds_list_add(tile.neighbors, map[xx-1,yy+1]);
        }
        //add bottom right neighbor
        if(xx &lt; mapWidth -1 &amp;&amp; yy &lt; mapHeight - 1){
            ds_list_add(tile.neighbors, map[xx+1,yy+1]);
        }
    }
}

instance_create(x,y,obj_cursor);


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
switch(state){
    case "init":
    with(obj_tile){
        if(instance_position(x+GRID_SIZE/2,y+GRID_SIZE/2,obj_terrain)){
            tempTerrain = instance_position(x+GRID_SIZE/2,y+GRID_SIZE/2,obj_terrain);
    
            switch(tempTerrain.type){
                case "wall":
                    instance_change(obj_wall,true);
                    type = "wall";
                    passable = false;
            
                    break;
                case "ruble":
                    instance_change(obj_ruble,true);
                    type = "ruble";
                    moveCost = 2;
            
                    break;
    
            }
    
            with(tempTerrain){
                instance_destroy();
            }
        }
        
        if(instance_position(x+GRID_SIZE/2,y+GRID_SIZE/2,obj_unit)){
            occupant = instance_position(x+GRID_SIZE/2,y+GRID_SIZE/2,obj_unit);
            occupant.gridX = gridX;
            occupant.gridY = gridY;
        }
        
    }
    state = "roll init";
    break;
    
    case "roll init":
        tempInit = ds_priority_create();
        
        with(obj_unit){
            initRoll = irandom_range(0,2) + reflexes;
            
            ds_priority_add(other.tempInit, id, initRoll);
        }
        
        while(ds_priority_size(tempInit) &gt; 0){
            ds_list_add(turnOrder, ds_priority_delete_max(tempInit));    
        }
        
        turnMax = ds_list_size(turnOrder);
        ds_priority_destroy(tempInit);
        state = "ready";
        
        break;
        
        
    case "ready":
        if(currentUnit == noone){
            turnCounter +=1;
            
            if(turnCounter &gt;= turnMax){
                turnCounter = 0;
                roundCounter += 1;
            }
            
            currentUnit = ds_list_find_value(turnOrder, turnCounter);
            
            currentUnit.actionPoints = 2;
            currentUnit.canAct = true;
            
            //only pass off actions and cursor if actor is blue_army
            //otherwise make target flash
            if(currentUnit.army == BLUE_ARMY){
                obj_cursor.selectedUnit = currentUnit;
                
                movement_range(map[currentUnit.gridX,currentUnit.gridY],currentUnit.moveRange, currentUnit.actionPoints);
                
                switch(currentUnit.attackType){
                    case "ranged":
                        ranged_attack(currentUnit);
                        break;
                    case "melee":
                        melee_attack_range(currentUnit);
                        break;
                }
            }else{
                currentUnit.flash = true;
                currentUnit.alarm[0] = 30;
            }
            
            
            
        }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>equip_all_units();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
