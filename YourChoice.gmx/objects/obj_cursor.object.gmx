<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprt_cursor</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-6</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Mouse cursor object
gridX=0;
gridY=0;

hoverTile = noone;
hoverButton = noone;

selectedUnit = noone;

instance_create(0,0,obj_selector);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Cursor update status
x = mouse_x;
y = mouse_y;

gridX = floor(x/GRID_SIZE);
gridY = floor(y/GRID_SIZE);

if(gridX &lt; 0 || gridY &lt; 0 || gridX &gt;= room_width/GRID_SIZE || gridY &gt;= room_height/GRID_SIZE){
    hoverTile = noone;
}else{
    hoverTile = map[gridX,gridY];
}

with(obj_button){
    if(keyboard_check_pressed(vk_backspace) || keyboard_check_pressed(ord(hotKey))){
        other.selectedUnit.state = "perform action";
        instance_destroy();
    }
}

if(instance_place(x,y,obj_button)){
    hoverButton = instance_place(x,y, obj_button);
    hoverTile = noone;
}else{
    hoverButton = noone;
}

if(mouse_check_button_pressed(mb_left)){
    if(selectedUnit != noone &amp;&amp; hoverButton != noone){
        perform_buttons(selectedUnit, hoverButton);
    }
    
}


if(mouse_check_button_pressed(mb_right)){
    if(selectedUnit != noone &amp;&amp; hoverTile.moveTile){
    
        current = hoverTile;
        
        //create priority queue
        path = ds_priority_create();
        
        ds_priority_add(path, current, current.GScore);
        
        while(current.parent != noone){
            ds_priority_add(path, current.parent, current.parent.GScore)
            current = current.parent;
        }
    
        do{
            current = ds_priority_delete_min(path);
            path_add_point(selectedUnit.movementPath, current.x, current.y,100);
            
        }until(ds_priority_empty(path));
        //clean up
        ds_priority_destroy(path);
        
        map[selectedUnit.gridX,selectedUnit.gridY].occupant = noone;
        
        selectedUnit.gridX = gridX;
        selectedUnit.gridY = gridY;
        
        hoverTile.occupant = selectedUnit;
        
        selectedUnit.state = "Begin path";
        
        if(hoverTile.GScore &gt; selectedUnit.moveRange){
            selectedUnit.actionPoints -= 2;
            wipe_tiles(); 
            wipe_buttons(); 
        }else{
            selectedUnit.actionPoints -= 1;
            wipe_tiles();
            wipe_buttons();
        }
        
        selectedUnit = noone;
        
    }
    
    if(selectedUnit != noone &amp;&amp; hoverTile.attackTile){
        switch(selectedUnit.attackType){
            case "ranged":
                selectedUnit.canAct = false;
                selectedUnit.actionPoints -= 1;
                selectedUnit.attackTarget = hoverTile.occupant;
                selectedUnit.state = "begin attack";
                selectedUnit.attackTimer = 10;
                
                selectedUnit = noone;
                wipe_tiles();
                wipe_buttons();
                
                break;
            
                case "melee":
                    selectedUnit.canAct = false;
                    selectedUnit.actionPoints -= 1;
                    selectedUnit.attackTarget = hoverTile.occupant;
                    selectedUnit.state = "begin attack";
                    selectedUnit.attackTimer = 10;
                    
                    selectedUnit = noone;
                    wipe_tiles();
                    wipe_buttons();
                    
                    break;
        }
        
        
        
    }
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Some cursor checks before drawing
if(hoverTile != noone){
    draw_sprite(sprt_selected,-1,gridX*GRID_SIZE,gridY*GRID_SIZE);
}

draw_self();

if(selectedUnit != noone){
    tempText = selectedUnit.name + " the " + selectedUnit.class;
    
    tempHitPoints = "HP: " + string(selectedUnit.hitPoints) + "/" + string(selectedUnit.maxHitPoints);
    
    
    draw_set_colour(c_black);
    draw_rectangle(0,0,string_width(tempText),0 + string_height(tempText),false);
    draw_rectangle(0,0+GRID_SIZE/2,string_width(tempHitPoints),0 + GRID_SIZE/2 + string_height(tempHitPoints),false);
        
    draw_set_colour(c_white);
    draw_text(0,0, tempText);
    draw_text(0,0 + GRID_SIZE/2,tempHitPoints);
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
