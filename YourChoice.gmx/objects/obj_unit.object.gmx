<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>state = "idle";

army = BLUE_ARMY;

///unit stats
gridX = 0;
gridY = 0;

name = "somethings is wrong";
class = "Civilian";
race = "Human";

level = 1;

//base stats
baseHitChance = 60;
baseCritChance = 15;
defence = 0;
dodgeChance = 0;
intellect = 3;
agriculture = 3;
craftsmanship = 3;

maxHitPoints = 4 + ((level - 1));
hitPoints = maxHitPoints;
armor = 0;

sightRadius = 12; 
attackType = "ranged";
attackTarget = noone;

attackTimer = 0;

damage = 3 + irandom_range(0,2);
damageType = "piercing";
critDamage = round(damage * 1.5);

moveRange = 5;
actionPoints=2;
canAct = false;

reflexes = 5;
initRoll = 0;

//pathing vars
movementPath = path_add();

path_set_kind(movementPath, 2);
path_set_closed(movementPath, false);

moveAnimSpeed = 8;

//equip
slotHead = noone;
slotArmor = noone;
slotWeapon1 = noone;
slotWeapon2 = noone;
slotItem1 = noone;
slotItem2 = noone;

//ability variables
readiedAction = "error";

//variables related to effekts
shake = 0;
shakeMag = 0;

//variables related to buttons
defaultActions = ds_list_create();

ds_list_add(defaultActions,"end turn");
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>shake -= 1;


switch(state){
    case "Begin path":
        path_start(movementPath,moveAnimSpeed, 0, true);
        
        state = "Moving"
        break;
    
    case "begin attack":
        attackTimer -=1;
        if(attackTimer &lt;=0){
            state = "attack";
        }
        break;
        
    case "attack":
        switch(attackType){
            case "ranged":
                tempDmg=0;
                if(irandom_range(0,100)&lt;=(baseHitChance-attackTarget.defence)){
                    if(irandom_range(0,100)&lt;=attackTarget.dodgeChance){
                        attackStatus = "dodge";
                        tempDmg = 1;                
                    }else{
                        if(irandom_range(0,100)&lt;=baseCritChance){
                            attackStatus = "crit";
                            tempDmg = critDamage;
                        }else{
                            attackStatus = "hit";
                            tempDmg = damage;
                        }
                    }
                }else{
                    attackStatus = "miss";
                }
                
                attackTarget.hitPoints -= tempDmg;
                
                attackDir = point_direction(x+GRID_SIZE/2,y+GRID_SIZE/2,attackTarget.x+GRID_SIZE/2,attackTarget.y+GRID_SIZE/2);
        
                beginX = x + 16 + lengthdir_x(30, attackDir);
                beginY = y + 16 + lengthdir_y(30, attackDir);
                
                with(instance_create(beginX,beginY,obj_bullets)){
                    target = other.attackTarget;
                    status = other.attackStatus;
                    damage = other.tempDmg;
                    damageType = other.damageType;
                    
                    path_add_point(movementPath, other.beginX, other.beginY, 100);
                    
                    if(status != "miss"){
                        path_add_point(movementPath, target.x +GRID_SIZE/2, target.y+GRID_SIZE/2,100);
                    }else{
                        path_add_point(movementPath, target.x + (irandom_range(30,50)*choose(-1,1)), target.y + (irandom_range(30,50)*choose(-1,1)),100);
                    }
                    
                    path_start(movementPath, speed, true, true);
                
                }
                
                
                
                state = "end attack";
                attackTimer = 30;
                
                break;
            
            case "melee":
                tempDmg=0;
                if(irandom_range(0,100)&lt;=(baseHitChance-attackTarget.defence)){
                    if(irandom_range(0,100)&lt;=attackTarget.dodgeChance){
                        attackStatus = "dodge";
                        tempDmg = 0;                
                    }else{
                        if(irandom_range(0,100)&lt;=baseCritChance){
                            attackStatus = "crit";
                            tempDmg = critDamage;
                        }else{
                            attackStatus = "hit";
                            tempDmg = damage;
                        }
                    }
                }else{
                    attackStatus = "miss";
                }
                if(attackStatus != "miss"){
                    for(ii = 0; ii&lt; 6; ii +=1){
                        with(instance_create(attackTarget.x+GRID_SIZE/2,attackTarget.y+GRID_SIZE/2,obj_biff)){
                            direction = irandom(360);
                            speed = choose(2,4);
                            scale = choose(2,3);
                            
                            image_speed = 0.5;
                            
                            if(other.attackStatus == "crit"){
                                color = c_yellow;
                            }
                        }
                    }
                    
                    if(attackStatus=="crit"){
                        attackTarget.shake = 8;
                        attackTarget.shakeMMag = 8;
                    }else{
                        attackTarget.shake = 4;
                        attackTarget.shakeMMag = 4;
                    }
                    
                    attackTarget.hitPoints -= tempDmg;
                    
                    with(instance_create(attackTarget.x+round(GRID_SIZE*0.7),attackTarget.y+round(GRID_SIZE*0.1),obj_damageText)){
                        text = "- melee " + string(other.tempDmg);
                        
                        ground = y;
                        if(other.attackStatus == "crit"){
                            font = fnt_crit;
                        }
                    }
                }else{
                    with(instance_create(attackTarget.x+round(GRID_SIZE*0.7),attackTarget.y+round(GRID_SIZE*0.1),obj_damageText)){
                        text = "miss melee";
                        
                        ground = y;
                    }
                }
                
                state = "end attack";
                
                attackTimer = 10;
                
                break;        
        }
        
        break;
        
    case "end attack":
        attackTimer -= 1;
        if(attackTimer &lt;= 0){
            if(actionPoints &gt; 0){
                obj_cursor.selectedUnit = id;
                
                movement_range(map[gridX,gridY],moveRange, actionPoints);
            }else{
                obj_battle.currentUnit = noone;
            }
            
            state = "idle";
        }
        break;
        
   // case "begin action":
    
        //break;
        
    case "perform action":
        perform_action(id,readiedAction);
        
        wipe_tiles();
        wipe_buttons();
        break;
        
    case "end action":
        attackTimer -= 1;
        if(actionTimer &lt;= 0){
            state = "idle";
            
            if(actionPoints &gt; 0){
                movement_range(map[gridX,gridY],moveRange, actionPoints);
            }else{
                state = "idle";
                obj_cursor.selectedUnit = noone;
                obj_battle.currentUnit = noone;
            }
        }
        break;
        
    case "end turn":
        attackTimer -= 1;
        if(attackTimer &lt;= 0){
            obj_cursor.selectedUnit = noone;
            obj_battle.currentUnit = noone;
            state = "idle";
            
        }
        break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="8">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>path_clear_points(movementPath);

state = "Idle";

if(actionPoints &gt; 0){
    obj_cursor.selectedUnit = id;
    movement_range(map[gridX, gridY], moveRange, actionPoints);
    
    if(canAct){
        switch(attackType){
            case "ranged":
                ranged_attack(id);
                break;
                
            case "melee":
                melee_attack_range(id);
                break;
        }
    }
}else{
    obj_battle.currentUnit = noone;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(obj_cursor.selectedUnit == id &amp;&amp; obj_cursor.hoverTile != noone){
    
    if(obj_cursor.hoverTile != noone){
        tempTile = obj_cursor.hoverTile;
        if(tempTile.moveTile){
            current = obj_cursor.hoverTile;
        
            while(current.parent != noone){
                draw_line_width_colour(current.x+GRID_SIZE/2, current.y + GRID_SIZE/2, current.parent.x + GRID_SIZE/2, current.parent.y + GRID_SIZE/2, 4, c_lime, c_lime)
            
                current = current.parent;
            }
        }
        
        if(tempTile.attackTile){
            switch(attackType){
                case "ranged":
                   draw_line_width_colour(x+GRID_SIZE/2, y + GRID_SIZE/2, tempTile.x + GRID_SIZE/2, tempTile.y + GRID_SIZE/2, 4, c_purple, c_purple);
                   break;
            }
        }
        
    }
}

if(shake &gt; 0){
    draw_sprite_ext(sprite_index,-1,x + irandom_range(-shakeMag,shakeMag),y + irandom_range(-shakeMag,shakeMag),1,1,0,c_white,1);
}else{
    draw_self();
}

draw_self();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
